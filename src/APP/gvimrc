" gvimrc - copy/y gvimrc X:\MSwin\bin\vim\.
" Nur mit menu: "set Editieren/Auswahl schriftart -> "Lucida Console" 12
" find fintName with :set gfn?
" guifont=Lucida_Console:h12:cANSI:qDRAFT
" in rc-file: set gfn=Lucida_Console:h12:cANSI:qDRAFT
" in rc-file: set gfn=Fixedsys:h11:cANSI


" F1 = 11; Shift F1 = 23; Ctrl F# geht in Linux nicht !!
" shift <S-F1> Ctrl <C-F1> und Alt <M-F1> gehen nicht !


" F1 = add // ..
map <F1>  ^^i// j

" F2 = remove // ..
"map <F2> ^^xxxj
map <F2>	^^xxxj

" F3 = Quit
map <F3> :q

"F9
map <F9> /\/\/

"-----------
" Ctl K = add /* .. */  (Alt faengt WinMan. ab)
map <C-K> ^^i/* $a */j
" Ctl U = remove Kommentar
map <C-U> ^^xxx$xxxj

"-----------
" "<" = change // -> /* .. */
"map < 0/\/\/xxi/* $a */
" ">" = change  /* .. */ -> //
map > kxxi//$xxxj
" Alt H = :tag help
map è :tag help


" Alt d = Directory (:vi .)
map d :vi.

" Alt n = next File (:e#)
map n :e#

" Ctl R: edit tagobject (Ctrl ])
map  

" Ctl T = return to previous Tag-File (Ctrl T)
"map t 

" Ctl b = set Bookmark; b = goto Bookmark
"map  mA
map  :call BMSET()
"map  BMSET()
"map b g'A
let Cmd="A"
"map b g'{Cmd}
map b :call BMGO()
map <t_k4> :q!

" Alt p = Display Prototyp from Includefile
map p [I

" h = display Doku
map h :!cat /p2/fwork/.vimdoc

" Ctl f = grep; braucht $SRCLST
:map  :call GREP()


" Alt - = Testfunction
":map - :let bmset = TEST1(bmset)
":map - :let bmset = TEST1(bmset){bmset}
let x1 = "iaaa"

" damit kann man F1 (^[OP) abfangen !!
":map <Char-27>OP :echo "abc"

" Alt m = :make
"map m :execute MAKE1()



"-------------------------------------------------
" anzahl blanks pro tab
set ts=2

" Linux-tags:
"let tagfiles = system("ls -m *.tag|sed \"s/ //g\"")
"let &tags = substitute(tagfiles, "\n", "", "g")

" MS-tags:
let tag1 = "../tags/" . system("dir/b ..\\tags\\*.tag")
let &tags = substitute(tag1, "\n", ",\.\./tags/", "g")


"set mouse=n
" Doppelklicktime in ms
"set mousetime=600
"set ruler
"set timeoutlen=100
"" sonst shift-select notwendig
"set mousemodel=extend

" Font MS-W10: (auf Win7 kein ':')
"set gfn=Lucida_Console:h12:cANSI:qDRAFT
"set gfn=Courier_New:h10:cANSI:qDRAFT

" Font MS-W7:
set gfn=Fixedsys:h11:cANSI



" enable Filename im Windowtitle
set title


" 16 Colours-fuers xterm notw.
set t_Co=16
"Definiert irgendwelche Farben
"set t_AB=11
"set t_Sf=[3%dm
"set t_Sb=[4%dm

set noautoindent
set nosmartindent
set nocindent

" nr of visible lines
set lines=55

set bg=dark
syntax on
:hi Normal guifg=#ffffff guibg=#000000
:hi Comment term=NONE ctermfg=14 guifg=#40ff40
:hi Constant term=NONE ctermfg=3
:hi PreProc term=NONE ctermfg=11
:hi Statement term=NONE gui=NONE ctermfg=11
:hi Type term=NONE gui=NONE ctermfg=13 guifg=#a0a0ff
:hi cStructure term=NONE ctermfg=13
" fuer :cw ganz wichtig
:hi Search term=bold cterm=NONE ctermfg=11 ctermbg=0
" default dunkelblau(4) = unleserlich
:hi SpecialKey term=bold cterm=NONE ctermfg=6
:hi NonText term=bold cterm=NONE ctermfg=6
:hi Directory term=bold cterm=NONE ctermfg=6


" guioptions fuer gvim:
" get global selection (Autoselect)
"set guioptions+=a
" remove menu
"set guioptions-=m
" remove Toolbar
set guioptions-=T
" nur f AIX (wenn Cur nicht blinkt)
"set guioptions+=p

"set guifont=9x15bold




"-------------------------------------------------
:function GREP ()
" der akt. Dateiname
let fn1 = expand("%")
"das Wort unter dem cursor
let cw = expand("<cword>")
"let cmd = ":!grep -n " . cw . " " . $SRCLST . " > grep.log"
"execute cmd
let cw = input("grep ",cw)
let slst = system("make SRCLST")
let slst = substitute(slst, "\n", "", "g")
let cmd = "grep -n " . cw . " " . slst . " > grep.log"
"echo cmd
let irc = system(cmd)
cw 20
cf grep.log
"if (fn1 != bufname(1))
"e#
"endif
:endfunction



:function EDFIL1 ()
"let fn = expand("<cfile>")
let cmd = ":vi " . expand("<cfile>")
execute cmd
:endfunction

" Alt e = edit file under cursor
:map e :execute EDFIL1()


:function MAKE1 ()
" der akt. Dateiname
let fn1 = expand("%")
let cmd = "make > make.log 2>&1"
let irc = system(cmd)
cw 20
cf make.log
"if bufname(1) == "#-"
"if fn1 == bufname(1)
"return
"endif
"e#
:endfunction


:function TEST1 (bmset)
:echo 'Test1' a:bmset
"let sel = system("XFetchBuffer")
"echo sel . strlen(sel)
"let a:bmset = a:bmset + 1
let g:bmset = "ibbb"
return "iaa"
:endfunction


:function BMSET ()
:let bm = g:bmset
:let g:bmgo = bm
:if bm == 0
mark A
:let bm = 1
:else
mark B
:let bm = 0
:endif
:echo 'set Bookmark' bm
:let g:bmset = bm
:endfunction


function BMGO ()
let bm = g:bmgo
if bm == 0
exe "normal 'A"
let bm = 1
elseif bm == 1
exe "normal 'B"
let bm = 0
endif
echo 'go Bookmark' bm
let g:bmgo = bm
endfunction


let bmset = 0
let bmgo = -1

"---------- EOF -------------
